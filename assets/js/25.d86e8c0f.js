(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{933:function(t,a,s){"use strict";s.r(a);var e=s(6),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#关于浏览器缓存"}},[t._v("关于浏览器缓存")])]),s("li",[s("a",{attrs:{href:"#关于vue项目缓存"}},[t._v("关于vue项目缓存")])]),s("li",[s("a",{attrs:{href:"#_304-not-modify"}},[t._v("304 Not Modify")])]),s("li",[s("a",{attrs:{href:"#如何解决页面缓存问题"}},[t._v("如何解决页面缓存问题")])])])]),s("p"),t._v(" "),s("h3",{attrs:{id:"关于浏览器缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于浏览器缓存"}},[t._v("#")]),t._v(" 关于浏览器缓存")]),t._v(" "),s("p",[t._v("浏览器缓存，有时候我们需要他，因为他可以提高网站性能和浏览器速度，提高网站性能。但是有时候我们又不得不清除缓存，因为缓存可能误事，出现一些错误的数据。\n最近遇到了vue项目中有发现，前端项目有缓存的情况，了解了一下发现一些问题")]),t._v(" "),s("h3",{attrs:{id:"关于vue项目缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于vue项目缓存"}},[t._v("#")]),t._v(" 关于vue项目缓存")]),t._v(" "),s("p",[t._v("由于项目属于单页应用经过vue-cli打包，正常情况下静态文件会带有hash值名，不会有缓存的情况，通过查看F12开发者工具发现，确实文件会被缓存。在火狐浏览器与谷歌浏览器中都不相同。")]),t._v(" "),s("h3",{attrs:{id:"_304-not-modify"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_304-not-modify"}},[t._v("#")]),t._v(" 304 Not Modify")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/question/1_vue_304/2.png",alt:""}}),t._v(" "),s("img",{attrs:{src:"/img/question/1_vue_304/3.png",alt:""}})]),t._v(" "),s("ul",[s("li",[t._v("第一次访问 200")]),t._v(" "),s("li",[t._v("鼠标点击二次访问 (Cache)")]),t._v(" "),s("li",[t._v("按F5刷新 304")]),t._v(" "),s("li",[t._v("按Ctrl+F5强制刷新 200")])]),t._v(" "),s("p",[t._v("HTTP 304: Not Modified ：Not Modified客户端有缓冲的文档并发出了一个条件性的请求（一般是提供if-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。如果客户端在请求一个文件的时候，发现自己缓存的文件有Last Modified,那么杂请求中会包含if Modified Since,这个时间就是缓存文件的Last Modified(Date).如下图（很想上传自己的图片，但是不知道为什么新版的csdn上传的图片总是上传不上，所以就借鉴别人的图片了，我的图片中在响应头中Last Modified实际是Date）\n在请求头（Request Header）中有：if-Modified-Since:Mon,17 Aug 2015 01:53:41 GMT\n在响应头（Response Headers）中有：Last-Modified:Mon,17 Aug 2015 01:53:41 GMT\n对比一下上面的请求头信息，我们能够发现，两个的日期和时间完全一致，如果一致就是从缓存中去获取内容\n因此，如果请求中包含 If Modified Since，就说明已经有缓存在客户端。只要判断这个时间和当前请求的文件的修改时间就可以确定是返回 304 还是 200 。对于静态文件，例如：CSS、图片，服务器会自动完成 Last Modified 和 If Modified Since 的比较，完成缓存或者更新。\n但是对于动态页面，就是动态产生的页面，往往没有包含 Last Modified 信息，这样浏览器、网关等都不会做缓存，也就是在每次请求的时候都完成一个 200 的请求。\n因此，对于动态页面做缓存加速，首先要在 Response 的 HTTP Header 中增加 Last Modified 定义，其次根据 Request 中的 If Modified Since 和被请求内容的更新时间来返回 200 或者 304 。虽然在返回 304 的时候已经做了一次数据库查询，但是可以避免接下来更多的数据库查询，并且没有返回页面内容而只是一个 HTTP Header，从而大大的降低带宽的消耗，对于用户的感觉也是提高。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/question/1_vue_304/1.jpg",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"如何解决页面缓存问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何解决页面缓存问题"}},[t._v("#")]),t._v(" 如何解决页面缓存问题")]),t._v(" "),s("h4",{attrs:{id:"_1、meta方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、meta方法"}},[t._v("#")]),t._v(" 1、meta方法")]),t._v(" "),s("p",[t._v("添加后，页面向服务器请求资源时会带上请求头")]),t._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("META")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("HTTP-EQUIV")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("pragma"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("CONTENT")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("no-cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("META")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("HTTP-EQUIV")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("Cache-Control"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("CONTENT")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("no-cache, must-revalidate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("META")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("HTTP-EQUIV")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("expires"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("CONTENT")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h4",{attrs:{id:"_2、随机数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、随机数"}},[t._v("#")]),t._v(" 2、随机数")]),t._v(" "),s("p",[t._v('URL 参数后加上 "?ran=" + Math.random(); //当然这里参数ran可以任意取了')]),t._v(" "),s("h4",{attrs:{id:"_3、后端设置响应头不使用缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、后端设置响应头不使用缓存"}},[t._v("#")]),t._v(" 3、后端设置响应头不使用缓存")]),t._v(" "),s("p",[t._v('在服务端加 header("Cache-Control: no-cache, must-revalidate");等等')])])}),[],!1,null,null,null);a.default=n.exports}}]);